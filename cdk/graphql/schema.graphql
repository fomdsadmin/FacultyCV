type Affiliations {
	data_details: AWSJSON!
}

type NotifyGotenbergPayload {
  key: String! @aws_iam
}

type DepartmentAffiliation {
	user_id: String!
	first_name: String
	last_name: String
	primary_unit: AWSJSON
	joint_units: AWSJSON
	hospital_affiliations: AWSJSON
}

input AuditViewInput {
	logged_user_id: String!
	logged_user_first_name: String!
	logged_user_last_name: String!
	ip: String
	browser_version: String
	page: String
	session_id: String
	assistant: Boolean
	profile_record: String
	logged_user_role: String
	logged_user_email: String
	logged_user_action: String
}

type AuditViewRecord {
	log_view_id: Int!
	ts: String!
	logged_user_id: String!
	logged_user_first_name: String!
	logged_user_last_name: String!
	ip: String
	browser_version: String
	page: String
	session_id: String
	assistant: Boolean
	profile_record: String
	logged_user_role: String
	logged_user_email: String
	logged_user_action: String
}

type AuditViewResult {
	records: [AuditViewRecord]
	total_count: Int
}

# Get Bio from OpenAI
type BioResponse {
	answer: String
	error: String
}

type CVData {
	data_section_id: String!
	data_details: AWSJSON!
}

type CVDataResponse {
	data: [CVData!]!
	total_count: Int!
	returned_count: Int!
}

type DataSection {
	data_section_id: String!
	title: String!
	info: String!
	description: String!
	data_type: String
	attributes: AWSJSON!
	# JSON
	attributes_type: AWSJSON
	# JSON
	archive: Boolean
}

type Declaration {
	reporting_year: String!
	other_data: AWSJSON!
	created_by: String!
	created_on: String!
}

type ElsevierAuthorProfile {
	last_name: String!
	first_name: String!
	name_variants: String
	subjects: String
	current_affiliation: String
	scopus_id: String!
	orcid: String
}

type InsertResponse {
	id: Int!
	created_on: String!
}

# This is for OpenAI
type LambdaAIResponse {
	answer: [ResearchKeywordCategory]
	response_time_seconds: Float
	error: String
}

type Notification {
	record_id: ID!
	title: String
	description: String
	date: AWSDate
	archive: String
	information_complete: String
}

type OrcidAuthorProfile {
	last_name: String!
	first_name: String!
	credit_name: String
	name_variants: String
	keywords: String
	researcher_urls: [String]
	orcid_id: String!
}

type OrcidSectionOutput {
	bio: String
	keywords: String
	publications: [Publication]
	other_data: AWSJSON
}

type Patent {
	patent_id: String!
	first_name: String!
	last_name: String!
	data_details: AWSJSON!
}

type Publication {
	publication_id: String!
	# type: String!
	title: String!
	cited_by: Int
	keywords: [String]
	journal: String
	link: String
	doi: String
	year_published: String
	author_names: [String]!
	author_ids: [String]!
}

type PublicationMatches {
	publications: [Publication]
	total_results: Int!
	total_pages: Int!
	current_page: Int!
}

type ResearchKeywordCategory {
	category: String
	keywords: [String]
}

type RiseData {
	rise_data_id: String!
	first_name: String!
	last_name: String!
	data_details: AWSJSON!
}

type SecureFunding {
	secure_funding_id: String!
	first_name: String!
	last_name: String!
	data_details: AWSJSON!
}

type TeachingData {
	teaching_data_id: String!
	data_details: AWSJSON!
	#JSON
	institution_user_id: String!
}

type Template {
	template_id: String!
	title: String!
	template_structure: AWSJSON!
	start_year: String
	end_year: String
}

type TotalOrcidPublications {
	total_results: Int!
	put_codes: [Int]!
}

type TotalScopusPublications {
	total_results: Int!
	error: String
}

type StagingScopusPublication {
	id: String!
	user_id: String!
	data_details: AWSJSON!
	is_new: Boolean!
	fetched_at: String!
}

type StagingScopusPublicationsResponse {
	publications: [StagingScopusPublication!]!
	total_count: Int!
	returned_count: Int!
	offset: Int!
	error: String
}

type UniversityInfo {
	university_info_id: String!
	type: String
	value: String
}

type User {
	user_id: String!
	first_name: String
	last_name: String
	preferred_name: String
	email: String
	role: String
	bio: String
	rank: String
	institution: String
	primary_department: String
	secondary_department: String
	primary_faculty: String
	secondary_faculty: String
	primary_affiliation: String
	secondary_affiliation: String
	campus: String
	keywords: String
	institution_user_id: String
	scopus_id: String
	orcid_id: String
	joined_timestamp: String
	pending: Boolean
	approved: Boolean
	cwl_username: String!
	vpp_username: String!
	active: Boolean!
}

type UserCVData {
	user_cv_data_id: String!
	user_id: String!
	data_section_id: String!
	data_details: AWSJSON!
	#JSON
	archive: Boolean
	archive_timestamp: String
	editable: Boolean
}

type UserConnection {
	user_connection_id: String!
	faculty_user_id: String!
	faculty_first_name: String!
	faculty_last_name: String!
	faculty_email: String!
	assistant_user_id: String!
	assistant_first_name: String!
	assistant_last_name: String!
	assistant_email: String!
	status: String!
	faculty_username: String!
	assistant_username: String!
}


type UsersCountResult {
	total_count: Int!
	faculty_count: Int!
	assistant_count: Int!
	dept_admin_count: Int!
	admin_count: Int!
	faculty_admin_count: Int!
}

type Mutation {
	notifyGotenbergGenerationComplete(key: String!): NotifyGotenbergPayload
		@aws_iam
	createGotenbergPdf(form_data_base64: String!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	addUserDeclaration(
		user_id: String!,
		reporting_year: Int!,
		created_by: String!,
		other_data: AWSJSON!
	): InsertResponse!
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	deleteUserDeclaration(user_id: String!, reporting_year: Int!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	deleteUserCVSectionData(user_id: String!, data_section_id: String!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	deleteSectionCVData(data_section_id: String!): String
		@aws_auth(cognito_groups: ["Admin"])
	updateUserDeclaration(user_id: String!, reporting_year: Int!, other_data: AWSJSON!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	addToUserGroup(userName: String!, userGroup: String!): String
	removeFromUserGroup(userName: String!, userGroup: String!): String
	generatePDF(first_name: String!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	addUser(
		first_name: String!,
		last_name: String!,
		email: String!,
		role: String!,
		pending: Boolean!,
		approved: Boolean!,
		cwl_username: String!,
		vpp_username: String!,
		primary_department: String!,
		primary_faculty: String!
	): String
		@aws_auth(cognito_groups: ["Admin","NewlyRegistered"])
	removeUser(
		user_id: String!
	): String
		@aws_auth(cognito_groups: ["Admin"])
	updateUser(
		user_id: String!,
		first_name: String,
		last_name: String,
		preferred_name: String,
		email: String,
		role: String,
		bio: String,
		institution: String,
		primary_department: String,
		primary_faculty: String,
		campus: String,
		keywords: String,
		institution_user_id: String,
		scopus_id: String,
		orcid_id: String,
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant", "NewlyRegistered"])
	updateUserPermissions(user_id: String!, pending: Boolean, approved: Boolean): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin"])
	updateUserActiveStatus(user_ids: [String!]!, active: Boolean!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin"])
	changeUsername(user_id: String!, cwl_username: String!, vpp_username: String!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","NewlyRegistered"])
	updateUserAffiliations(
		user_id: String!,
		first_name: String,
		last_name: String,
		affiliations: AWSJSON
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	addSection(
		title: String!,
		description: String!,
		data_type: String,
		attributes: AWSJSON!
	): String
		@aws_auth(cognito_groups: ["Admin"])
	updateSection(
		data_section_id: String!,
		archive: Boolean,
		attributes: AWSJSON,
		# JSON
attributes_type: AWSJSON
	): String
		@aws_auth(cognito_groups: ["Admin"])
	editSectionDetails(
		data_section_id: String!,
		title: String!,
		data_type: String!,
		description: String,
		info: String
	): String
		@aws_auth(cognito_groups: ["Admin"])
	addUserCVData(
		user_id: String!,
		data_section_id: String!,
		data_details: AWSJSON!,
		# JSON
editable: Boolean!,
		cognito_user_id: String
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	addBatchedUserCVData(
		user_id: String!,
		data_section_id: String!,
		data_section_title: String!,
		data_details_list: [AWSJSON!],
		editable: Boolean!
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	addStagingScopusPublications(
		user_id: String!,
		publications: [AWSJSON!]!
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	updateUserCVData(
		user_cv_data_id: String!,
		data_details: AWSJSON,
		# JSON
archive: Boolean,
		archive_timestamp: String,
		cognito_user_id: String
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	addUniversityInfo(type: String!, value: String!): String
		@aws_auth(cognito_groups: ["Admin"])
	addUserConnection(
		faculty_user_id: String!,
		faculty_first_name: String!,
		faculty_last_name: String!,
		faculty_email: String!,
		assistant_user_id: String!,
		assistant_first_name: String!,
		assistant_last_name: String!,
		assistant_email: String!,
		status: String!,
		faculty_username: String!,
		assistant_username: String!
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	updateUserConnection(user_connection_id: String!, status: String!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	deleteUserConnection(user_connection_id: String!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	updateUniversityInfo(university_info_id: String!, type: String, value: String): String
		@aws_auth(cognito_groups: ["Admin"])
	linkScopusId(user_id: String!, scopus_id: String!, orcid_id: String): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	linkOrcid(user_id: String!, orcid_id: String!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	addTemplate(
		title: String!,
		template_structure: AWSJSON!,
		start_year: String,
		end_year: String
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin"])
	updateTemplate(
		template_id: String!,
		title: String,
		template_structure: AWSJSON,
		start_year: String,
		end_year: String
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin"])
	deleteTemplate(template_id: String!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin"])
	updateLatexConfiguration(vspace: Float, margin: Float, font: String): String
		@aws_auth(cognito_groups: ["Admin"])
	addAuditView(input: AuditViewInput!): AuditViewRecord
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","Faculty","Assistant"])
}

type Query {
	getPresignedGotenbergBucketUrl(key: String!, method: String!): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getBioResponseData(username_input: String!): BioResponse
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	GetAIResponse(user_input: String!): LambdaAIResponse
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getUser(cwl_username: String!): User
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant","NewlyRegistered"])
	getUserWithVPPUsername(vpp_username: String!): User
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant","NewlyRegistered"])
	getExistingUser(institution_user_id: String!): User
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getAllSections: [DataSection]
		@aws_auth(cognito_groups: ["Admin","FacultyAdmin","DepartmentAdmin","Faculty","Assistant"])
	getArchivedSections: [DataSection]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin"])
	getUserCVData(user_id: String!, data_section_id: String, data_section_id_list: [String]): [UserCVData]
		@aws_auth(cognito_groups: ["Faculty","Assistant","FacultyAdmin","Admin","DepartmentAdmin"])
	getAllSectionCVData(data_section_id: String, data_section_id_list: [String]): CVDataResponse
		@aws_auth(cognito_groups: ["Admin"])
	getDepartmentCVData(data_section_id: String!, dept: String!, title: String, user_ids: [String]): CVDataResponse
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin"])
	getFacultyWideCVData(data_section_id: String!, faculty: String!, title: String): CVDataResponse
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin"])
	getArchivedUserCVData(user_id: String!): [UserCVData]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getElsevierAuthorMatches(first_name: String!, last_name: String!, institution_name: String): [ElsevierAuthorProfile]!
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	GetNotifications: [Notification]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getUserDeclarations(user_id: String!): [Declaration!]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getUserAffiliations(user_id: String!, first_name: String!, last_name: String!): [Affiliations!]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getDepartmentAffiliations(department: String!): [DepartmentAffiliation!]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin"])
	getOrcidSections(orcidId: String!, section: String!): OrcidSectionOutput
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getTotalOrcidPublications(orcid_id: String!): TotalOrcidPublications
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getTotalScopusPublications(scopus_id: String!): TotalScopusPublications
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getOrcidPublication(orcid_id: String!, put_codes: [Int]!): OrcidSectionOutput
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getOrcidAuthorMatches(first_name: String!, last_name: String!, institution_name: String): [OrcidAuthorProfile]!
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getAllUniversityInfo: [UniversityInfo]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant","NewlyRegistered"])
	getUserConnections(faculty_user_id: String, assistant_user_id: String): [UserConnection]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getAllTemplates: [Template]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getTeachingDataMatches(institution_user_id: String!): [TeachingData]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getPublicationMatches(scopus_id: String!, page_number: Int!, results_per_page: Int!): PublicationMatches
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getSecureFundingMatches(first_name: String!, last_name: String!): [SecureFunding]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getRiseDataMatches(first_name: String!, last_name: String!): [RiseData]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getAllUsers: [User]
		@aws_auth(cognito_groups: ["Admin","FacultyAdmin","DepartmentAdmin"])
	getPatentMatches(first_name: String!, last_name: String!): [Patent]
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getPresignedUrl(
		jwt: String!,
		key: String!,
		type: String,
		purpose: String
	): String
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","Faculty","Assistant"])
	getNumberOfGeneratedCVs(department: String): Int!
		@aws_auth(cognito_groups: ["Admin","FacultyAdmin","DepartmentAdmin"])
	cvIsUpToDate(cognito_user_id: String!, user_id: String!, template_id: String!): Boolean
	getLatexConfiguration: String!
		@aws_auth(cognito_groups: ["Faculty","Assistant","Admin"])
	getAuditView(
		logged_user_id: String,
		page_number: Int,
		page_size: Int,
		email: String,
		first_name: String,
		last_name: String,
		action: String,
		start_date: String,
		end_date: String
	): AuditViewResult
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
	getStagingScopusPublications(
		user_id: String,
		is_new: Boolean,
		limit: Int,
		offset: Int
	): StagingScopusPublicationsResponse
		@aws_auth(cognito_groups: ["Admin","DepartmentAdmin","FacultyAdmin","Faculty","Assistant"])
}
type Subscription {
	gotenbergGenerationStatusUpdate(key: String!): NotifyGotenbergPayload
		@aws_subscribe(mutations: ["notifyGotenbergGenerationComplete"])
}